import React, { useState, useEffect, useCallback } from 'react';
import styles from './RecipeApp.module.css'; // –ò–º–ø–æ—Ä—Ç CSS –º–æ–¥—É–ª—è

const RecipeApp = () => {
  const [randomNumber, setRandomNumber] = useState(() => Math.floor(Math.random() * 1000));
  const [currentRecipe, setCurrentRecipe] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchRandomRecipe = useCallback(async () => {
    setLoading(true);
    setError(null);

    try {
      const randomId = Math.floor(Math.random() * 100) + 1;
      const response = await fetch(`https://dummyjson.com/recipes/${randomId}`);

      if (!response.ok) {
        throw new Error('–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const data = await response.json();
      setCurrentRecipe(data);
      setRandomNumber(Math.floor(Math.random() * 1000));
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchRandomRecipe();
  }, [fetchRandomRecipe]);

  return (
    <div className={styles.container}>
      <h2 className={styles.counter}>–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {randomNumber}</h2>

      <button
        onClick={fetchRandomRecipe}
        className={styles.button}
        disabled={loading}
      >
        {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç'}
      </button>

      {error && <p className={styles.error}>–û—à–∏–±–∫–∞: {error}</p>}

      {loading && !currentRecipe && (
        <div className={styles.loaderContainer}>
          <div className={styles.loader}></div>
          <p>–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ü–µ–ø—Ç–∞...</p>
        </div>
      )}

      {currentRecipe && (
        <div className={styles.recipeCard}>
          <h3 className={styles.recipeTitle}>{currentRecipe.name}</h3>
          <img
            src={currentRecipe.image}
            alt={currentRecipe.name}
            className={styles.recipeImage}
            loading="lazy"
          />
          <div className={styles.recipeMeta}>
            <span title="–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è">
              ‚è±Ô∏è {currentRecipe.prepTimeMinutes + currentRecipe.cookTimeMinutes} –º–∏–Ω
            </span>
            <span title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π">üçΩÔ∏è {currentRecipe.servings}</span>
            <span title="–†–µ–π—Ç–∏–Ω–≥">‚≠ê {currentRecipe.rating}</span>
            <span title="–°–ª–æ–∂–Ω–æ—Å—Ç—å">‚ö° {currentRecipe.difficulty}</span>
          </div>
          
          <div className={styles.recipeDetails}>
            <div className={styles.ingredientsSection}>
              <h4>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</h4>
              <ul className={styles.ingredientsList}>
                {currentRecipe.ingredients.map((ingredient, index) => (
                  <li key={index}>{ingredient}</li>
                ))}
              </ul>
            </div>
            
            <div className={styles.instructionsSection}>
              <h4>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</h4>
              <ol className={styles.instructionsList}>
                {currentRecipe.instructions.map((step, index) => (
                  <li key={index}>{step}</li>
                ))}
              </ol>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default RecipeApp;